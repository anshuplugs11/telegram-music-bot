# ==================================================
# Telegram Music Bot - Environment Configuration
# ==================================================
# Copy this file to .env and fill in your values
# DO NOT commit .env file to git (it contains secrets)

# ==================================================
# REQUIRED: Telegram Bot Configuration
# ==================================================

# Get this from @BotFather on Telegram
# 1. Message @BotFather
# 2. Use /newbot command
# 3. Follow instructions to create your bot
# 4. Copy the token here
BOT_TOKEN=your_bot_token_from_botfather

# Get these from https://my.telegram.org
# 1. Go to https://my.telegram.org
# 2. Login with your phone number
# 3. Go to "API development tools"
# 4. Create a new application
# 5. Copy API ID and API Hash
API_ID=your_api_id_from_my_telegram_org
API_HASH=your_api_hash_from_my_telegram_org

# ==================================================
# REQUIRED: Owner Configuration
# ==================================================

# Your Telegram User ID (find it using @userinfobot)
# For multiple owners, separate with commas: 123456789,987654321
SUDO_USERS=your_user_id

# ==================================================
# OPTIONAL: Assistant Account Configuration
# ==================================================

# Pyrogram session string for better performance
# This is optional but recommended for better stability
# To generate:
# 1. Run: python -c "from pyrogram import Client; print(Client('assistant', API_ID, API_HASH).export_session_string())"
# 2. Enter phone number and verification code
# 3. Copy the session string here
SESSION_STRING=

# ==================================================
# DATABASE Configuration
# ==================================================

# Database URL - SQLite is default and works fine
# For other databases:
# PostgreSQL: postgresql://user:password@host:port/database
# MySQL: mysql://user:password@host:port/database
DATABASE_URL=sqlite:///music_bot.db

# ==================================================
# OPTIONAL: Music Platform Integration
# ==================================================

# Spotify API credentials (for better search results)
# Get from: https://developer.spotify.com/dashboard
# 1. Create an app
# 2. Copy Client ID and Secret
SPOTIFY_CLIENT_ID=
SPOTIFY_CLIENT_SECRET=

# SoundCloud API credentials (optional)
# Get from: https://developers.soundcloud.com/
SOUNDCLOUD_CLIENT_ID=

# ==================================================
# DEPLOYMENT Configuration
# ==================================================

# Port for web server (auto-assigned on most platforms)
# Heroku/Render: Leave as 8000 or use $PORT
# VPS: Choose any available port
PORT=8000

# ==================================================
# ADVANCED SETTINGS (Optional)
# ==================================================

# Maximum queue size per chat
MAX_QUEUE_SIZE=100

# Default volume (0-200)
DEFAULT_VOLUME=100

# Auto-leave voice chat after inactivity (seconds)
AUTO_LEAVE_TIME=600

# Enable maintenance mode (only sudo users can use bot)
MAINTENANCE_MODE=false

# Enable detailed logging
LOGGING_ENABLED=true

# Maximum concurrent downloads
MAX_CONCURRENT_DOWNLOADS=3

# Download timeout (seconds)
DOWNLOAD_TIMEOUT=300

# Rate limiting (commands per minute)
USER_RATE_LIMIT=10
CHAT_RATE_LIMIT=20

# ==================================================
# DEPLOYMENT EXAMPLES
# ==================================================

# For Heroku:
# BOT_TOKEN=1234567890:ABCdefGHIjklMNOpqrsTUVwxyz
# API_ID=12345678
# API_HASH=abcdef1234567890abcdef1234567890
# SUDO_USERS=123456789
# DATABASE_URL=sqlite:///music_bot.db

# For Render:
# Same as Heroku, PORT will be auto-assigned

# For Railway:
# Same as Heroku

# For VPS:
# Same as above + set PORT to your desired port

# ==================================================
# SECURITY NOTES
# ==================================================
# 1. Never share your .env file
# 2. Add .env to .gitignore
# 3. Keep your tokens secret
# 4. Regenerate tokens if compromised
# 5. Use environment variables in production
